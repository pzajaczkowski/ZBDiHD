--ZAD2

DROP TABLE LOCALIZATIONS CASCADE CONSTRAINTS;
CREATE TABLE LOCALIZATIONS
(
    LOCALIZATION_ID NUMBER PRIMARY KEY,
    COUNTRY         VARCHAR2(64),
    STATE           VARCHAR2(64),
    CITY            VARCHAR2(64)
);

DROP TABLE CUSTOMERS CASCADE CONSTRAINTS;
CREATE TABLE CUSTOMERS
(
    CUSTOMER_ID NUMBER PRIMARY KEY,
    EMAIL       VARCHAR2(64)
);

DROP TABLE CATEGORIES CASCADE CONSTRAINTS;
CREATE TABLE CATEGORIES
(
    CATEGORY_ID   NUMBER PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(64)
);

DROP TABLE PRODUCTS CASCADE CONSTRAINTS;
CREATE TABLE PRODUCTS
(
    PRODUCT_ID   NUMBER PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(128),
    CATEGORY_ID  NUMBER REFERENCES CATEGORIES (CATEGORY_ID)
);

DROP TABLE ORDERS CASCADE CONSTRAINTS;
CREATE TABLE ORDERS
(
    ORDER_ID        NUMBER PRIMARY KEY,
    ORDER_NUMBER    VARCHAR2(15),
    ORDER_DATE      DATE,
    SHIP_DATE       DATE,
    CUSTOMER_ID REFERENCES CUSTOMERS (CUSTOMER_ID),
    LOCALIZATION_ID NUMBER REFERENCES LOCALIZATIONS (LOCALIZATION_ID)
);

DROP TABLE ORDERPRODUCTS CASCADE CONSTRAINTS;
CREATE TABLE ORDERPRODUCTS
(
    ORDERPRODUCT_ID NUMBER PRIMARY KEY,
    ORDER_ID        NUMBER REFERENCES ORDERS (ORDER_ID),
    PRODUCT_ID      NUMBER REFERENCES PRODUCTS (PRODUCT_ID),
    QUANTITY        NUMBER(10),
    PROFIT          NUMBER(10, 2),
    SALES           NUMBER(10, 2)
);

-- ZAD3

DROP SEQUENCE S_CUSTOMERS;
DROP SEQUENCE S_LOCALIZATIONS;
DROP SEQUENCE S_CATEGORIES;
DROP SEQUENCE S_PRODUCTS;
DROP SEQUENCE S_ORDERS;
DROP SEQUENCE S_ORDERPRODUCTS;


CREATE SEQUENCE S_CUSTOMERS;
CREATE SEQUENCE S_LOCALIZATIONS;
CREATE SEQUENCE S_CATEGORIES;
CREATE SEQUENCE S_PRODUCTS;
CREATE SEQUENCE S_ORDERS;
CREATE SEQUENCE S_ORDERPRODUCTS;

CREATE OR REPLACE TRIGGER T_SET_CUSTOMER_ID
    BEFORE INSERT
    ON CUSTOMERS
    FOR EACH ROW
BEGIN
    :NEW.CUSTOMER_ID := S_CUSTOMERS.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER T_SET_LOCALIZATION_ID
    BEFORE INSERT
    ON LOCALIZATIONS
    FOR EACH ROW
BEGIN
    :NEW.LOCALIZATION_ID := S_LOCALIZATIONS.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER T_SET_CATEGORY_ID
    BEFORE INSERT
    ON CATEGORIES
    FOR EACH ROW
BEGIN
    :NEW.CATEGORY_ID := S_CATEGORIES.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER T_SET_PRODUCT_ID
    BEFORE INSERT
    ON PRODUCTS
    FOR EACH ROW
BEGIN
    :NEW.PRODUCT_ID := S_PRODUCTS.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER T_SET_ORDER_ID
    BEFORE INSERT
    ON ORDERS
    FOR EACH ROW
BEGIN
    :NEW.ORDER_ID := S_ORDERS.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER T_SET_ORDERPRODUCT_ID
    BEFORE INSERT
    ON ORDERPRODUCTS
    FOR EACH ROW
BEGIN
    :NEW.ORDERPRODUCT_ID := S_ORDERPRODUCTS.NEXTVAL;
END;
/

--INDEXES NEED FOR FASTER QUERIES
CREATE INDEX IDX_PRODUCTS_PRODUCT_NAME ON PRODUCTS (PRODUCT_NAME);
CREATE INDEX IDX_ORDERS_ORDER_NUMBER ON ORDERS (ORDER_NUMBER);

--ZAD4
CREATE OR REPLACE PACKAGE AMAZON_PACKAGE AS
    PROCEDURE P_LOAD_LOCALIZATIONS;
    PROCEDURE P_LOAD_CUSTOMERS;
    PROCEDURE P_LOAD_CATEGORIES;
    PROCEDURE P_LOAD_PRODUCTS;
    PROCEDURE P_LOAD_ORDERS;
    PROCEDURE P_LOAD_ORDERPRODUCTS;
    FUNCTION F_GET_STATE_PROFIT(P_STATE LOCALIZATIONS.STATE%TYPE, P_YEAR NUMBER) RETURN NUMBER;
END;

CREATE OR REPLACE PACKAGE BODY AMAZON_PACKAGE AS
    PROCEDURE P_LOAD_LOCALIZATIONS IS
    BEGIN
        MERGE INTO LOCALIZATIONS L
        USING (SELECT DISTINCT TRIM(REGEXP_SUBSTR(GEOGRAPHY, '[^,]+', 1, 1)) AS COUNTRY,
                               TRIM(REGEXP_SUBSTR(GEOGRAPHY, '[^,]+', 1, 2)) AS CITY,
                               TRIM(REGEXP_SUBSTR(GEOGRAPHY, '[^,]+', 1, 3)) AS STATE
               FROM TEMP) SUB
        ON (L.COUNTRY = SUB.COUNTRY AND L.STATE = SUB.STATE AND L.CITY = SUB.CITY)
        WHEN NOT MATCHED THEN
            INSERT (L.COUNTRY, L.STATE, L.CITY) VALUES (SUB.COUNTRY, SUB.STATE, SUB.CITY);
    END P_LOAD_LOCALIZATIONS;

    PROCEDURE P_LOAD_CUSTOMERS IS
    BEGIN
        MERGE INTO CUSTOMERS C
        USING (SELECT DISTINCT EMAILID FROM TEMP) SUB
        ON (C.EMAIL = SUB.EMAILID)
        WHEN NOT MATCHED THEN
            INSERT (C.EMAIL) VALUES (SUB.EMAILID);
    END P_LOAD_CUSTOMERS;

    PROCEDURE P_LOAD_CATEGORIES IS
    BEGIN
        MERGE INTO CATEGORIES C
        USING (SELECT DISTINCT CATEGORY FROM TEMP) SUB
        ON (C.CATEGORY_NAME = SUB.CATEGORY)
        WHEN NOT MATCHED THEN
            INSERT (CATEGORY_NAME) VALUES (SUB.CATEGORY);
    END P_LOAD_CATEGORIES;

    PROCEDURE P_LOAD_PRODUCTS IS
    BEGIN
        MERGE INTO PRODUCTS P
        USING (SELECT DISTINCT PRODUCT_NAME, CATEGORY_ID
               FROM TEMP T
                        JOIN CATEGORIES C ON C.CATEGORY_NAME = T.CATEGORY) SUB
        ON (P.PRODUCT_NAME = SUB.PRODUCT_NAME AND P.CATEGORY_ID = SUB.CATEGORY_ID)
        WHEN NOT MATCHED THEN
            INSERT (PRODUCT_NAME, CATEGORY_ID) VALUES (SUB.PRODUCT_NAME, SUB.CATEGORY_ID);
    END P_LOAD_PRODUCTS;

    PROCEDURE P_LOAD_ORDERS IS
    BEGIN
        MERGE INTO ORDERS O
        USING (SELECT DISTINCT T.ORDER_ID, T.ORDER_DATE, T.SHIP_DATE, C.CUSTOMER_ID, L.LOCALIZATION_ID
               FROM TEMP T
                        JOIN CUSTOMERS C ON T.EMAILID = C.EMAIL
                        JOIN LOCALIZATIONS L ON TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 1)) = L.COUNTRY
                   AND TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 2)) = L.CITY
                   AND TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 3)) = L.STATE) SUB
        ON (O.ORDER_NUMBER = SUB.ORDER_ID)
        WHEN NOT MATCHED THEN
            INSERT (ORDER_NUMBER, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, LOCALIZATION_ID)
            VALUES (SUB.ORDER_ID, SUB.ORDER_DATE, SUB.SHIP_DATE, SUB.CUSTOMER_ID, SUB.LOCALIZATION_ID);
    END P_LOAD_ORDERS;

    PROCEDURE P_LOAD_ORDERPRODUCTS IS
    BEGIN
        MERGE INTO ORDERPRODUCTS OP
        USING (SELECT DISTINCT O.ORDER_ID, P.PRODUCT_ID, T.PROFIT, T.QUANTITY, T.SALES
               FROM TEMP T
                        JOIN CATEGORIES C ON T.CATEGORY = C.CATEGORY_NAME
                        JOIN ORDERS O ON T.ORDER_ID = O.ORDER_NUMBER
                        JOIN PRODUCTS P ON T.PRODUCT_NAME = P.PRODUCT_NAME AND P.CATEGORY_ID = C.CATEGORY_ID) SUB
        ON (OP.ORDER_ID = SUB.ORDER_ID AND OP.PRODUCT_ID = SUB.PRODUCT_ID)
        WHEN NOT MATCHED THEN
            INSERT (OP.ORDER_ID, OP.PRODUCT_ID, OP.QUANTITY, OP.PROFIT, OP.SALES)
            VALUES (SUB.ORDER_ID, SUB.PRODUCT_ID, SUB.QUANTITY, SUB.PROFIT, SUB.SALES);
    END P_LOAD_ORDERPRODUCTS;

    FUNCTION F_GET_STATE_PROFIT(P_STATE LOCALIZATIONS.STATE%TYPE, P_YEAR NUMBER) RETURN NUMBER IS
        PROFIT NUMBER;
    BEGIN
        SELECT NVL(SUM(OP.PROFIT), 0)
        INTO PROFIT
        FROM ORDERPRODUCTS OP
                 JOIN ORDERS O ON OP.ORDER_ID = O.ORDER_ID
                 JOIN LOCALIZATIONS L ON O.LOCALIZATION_ID = L.LOCALIZATION_ID
        WHERE EXTRACT(YEAR FROM O.ORDER_DATE) = P_YEAR
          AND UPPER(P_STATE) = UPPER(L.STATE);

        RETURN PROFIT;
    END F_GET_STATE_PROFIT;
END;
/

BEGIN
    P_LOAD_LOCALIZATIONS();
    P_LOAD_CUSTOMERS();
    P_LOAD_CATEGORIES();
    P_LOAD_PRODUCTS();
    P_LOAD_ORDERS();
    P_LOAD_ORDERPRODUCTS();
END;

--ZAD5

--FOR ALL YEARS
SELECT STATE, PROFIT, YEAR
FROM (SELECT DISTINCT L.STATE,
                      AMAZON_PACKAGE.F_GET_STATE_PROFIT(L.STATE, EXTRACT(YEAR FROM O.ORDER_DATE)) AS PROFIT,
                      EXTRACT(YEAR FROM O.ORDER_DATE) AS YEAR
      FROM LOCALIZATIONS L
               JOIN ORDERS O ON L.LOCALIZATION_ID = O.LOCALIZATION_ID
      ORDER BY PROFIT DESC)
WHERE PROFIT = (SELECT MAX(PROFIT)
                FROM (SELECT AMAZON_PACKAGE.F_GET_STATE_PROFIT(L.STATE, YEAR) AS PROFIT
                      FROM LOCALIZATIONS L));

--FOR SELECTED YEAR (2014)
SELECT STATE, PROFIT
FROM (SELECT STATE, PROFIT
      FROM (SELECT DISTINCT L.STATE, AMAZON_PACKAGE.F_GET_STATE_PROFIT(L.STATE, 2014) AS PROFIT
            FROM LOCALIZATIONS L
            ORDER BY PROFIT DESC)
      WHERE PROFIT = (SELECT MAX(PROFIT)
                      FROM (SELECT AMAZON_PACKAGE.F_GET_STATE_PROFIT(L.STATE, 2014) AS PROFIT
                            FROM LOCALIZATIONS L)));

--CHECK ZAD5 ON TEMP
SELECT STATE, SUM(PROFIT) AS PROFIT,
YEAR FROM (
SELECT TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 3)) AS STATE, T.PROFIT, EXTRACT(YEAR FROM T.ORDER_DATE) AS YEAR
FROM TEMP T)
GROUP BY STATE, YEAR
ORDER BY YEAR, PROFIT DESC;