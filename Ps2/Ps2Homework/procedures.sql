--ZAD4

CREATE OR REPLACE PROCEDURE P_LOAD_LOCALIZATIONS IS
BEGIN
    MERGE INTO LOCALIZATIONS L
    USING (SELECT DISTINCT TRIM(REGEXP_SUBSTR(GEOGRAPHY, '[^,]+', 1, 1)) AS COUNTRY,
                           TRIM(REGEXP_SUBSTR(GEOGRAPHY, '[^,]+', 1, 2)) AS CITY,
                           TRIM(REGEXP_SUBSTR(GEOGRAPHY, '[^,]+', 1, 3)) AS STATE
           FROM TEMP) SUB
    ON (L.COUNTRY = SUB.COUNTRY AND L.STATE = SUB.STATE AND L.CITY = SUB.CITY)
    WHEN NOT MATCHED THEN
        INSERT (L.COUNTRY, L.STATE, L.CITY) VALUES (SUB.COUNTRY, SUB.STATE, SUB.CITY);
END;
/

CREATE OR REPLACE PROCEDURE P_LOAD_CUSTOMERS IS
BEGIN
    MERGE INTO CUSTOMERS C
    USING (SELECT DISTINCT EMAILID FROM TEMP) SUB
    ON (C.EMAIL = SUB.EMAILID)
    WHEN NOT MATCHED THEN
        INSERT (C.EMAIL) VALUES (SUB.EMAILID);
END;
/

CREATE OR REPLACE PROCEDURE P_LOAD_CATEGORIES IS
BEGIN
    MERGE INTO CATEGORIES C
    USING (SELECT DISTINCT CATEGORY FROM TEMP) SUB
    ON (C.CATEGORY_NAME = SUB.CATEGORY)
    WHEN NOT MATCHED THEN
        INSERT (CATEGORY_NAME) VALUES (SUB.CATEGORY);
END;
/

CREATE OR REPLACE PROCEDURE P_LOAD_PRODUCTS IS
BEGIN
    MERGE INTO PRODUCTS P
    USING (SELECT DISTINCT PRODUCT_NAME, CATEGORY_ID
           FROM TEMP T
                    JOIN CATEGORIES C ON C.CATEGORY_NAME = T.CATEGORY) SUB
    ON (P.PRODUCT_NAME = SUB.PRODUCT_NAME AND P.CATEGORY_ID = SUB.CATEGORY_ID)
    WHEN NOT MATCHED THEN
        INSERT (PRODUCT_NAME, CATEGORY_ID) VALUES (SUB.PRODUCT_NAME, SUB.CATEGORY_ID);
END;
/

CREATE OR REPLACE PROCEDURE P_LOAD_ORDERS IS
BEGIN
    MERGE INTO ORDERS O
    USING (SELECT DISTINCT T.ORDER_ID, T.ORDER_DATE, T.SHIP_DATE, C.CUSTOMER_ID, L.LOCALIZATION_ID
           FROM TEMP T
                    JOIN CUSTOMERS C ON T.EMAILID = C.EMAIL
                    JOIN LOCALIZATIONS L ON TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 1)) = L.COUNTRY
               AND TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 2)) = L.CITY
               AND TRIM(REGEXP_SUBSTR(T.GEOGRAPHY, '[^,]+', 1, 3)) = L.STATE) SUB
    ON (O.ORDER_NUMBER = SUB.ORDER_ID)
    WHEN NOT MATCHED THEN
        INSERT (ORDER_NUMBER, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, LOCALIZATION_ID)
        VALUES (SUB.ORDER_ID, SUB.ORDER_DATE, SUB.SHIP_DATE, SUB.CUSTOMER_ID, SUB.LOCALIZATION_ID);
END;
/

CREATE OR REPLACE PROCEDURE P_LOAD_ORDERPRODUCTS IS
BEGIN
    MERGE INTO ORDERPRODUCTS OP
    USING (SELECT DISTINCT O.ORDER_ID, P.PRODUCT_ID, T.PROFIT, T.QUANTITY, T.SALES
           FROM TEMP T
                    JOIN CATEGORIES C ON T.CATEGORY = C.CATEGORY_NAME
                    JOIN ORDERS O ON T.ORDER_ID = O.ORDER_NUMBER
                    JOIN PRODUCTS P ON T.PRODUCT_NAME = P.PRODUCT_NAME AND P.CATEGORY_ID = C.CATEGORY_ID) SUB
    ON (OP.ORDER_ID = SUB.ORDER_ID AND OP.PRODUCT_ID = SUB.PRODUCT_ID)
    WHEN NOT MATCHED THEN
        INSERT (OP.ORDER_ID, OP.PRODUCT_ID, OP.QUANTITY, OP.PROFIT, OP.SALES)
        VALUES (SUB.ORDER_ID, SUB.PRODUCT_ID, SUB.QUANTITY, SUB.PROFIT, SUB.SALES);
END;
/

BEGIN
    P_LOAD_LOCALIZATIONS();
    P_LOAD_CUSTOMERS();
    P_LOAD_CATEGORIES();
    P_LOAD_PRODUCTS();
    P_LOAD_ORDERS();
    P_LOAD_ORDERPRODUCTS();
END;
/