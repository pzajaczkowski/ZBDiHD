DROP TABLE TIME_DIM CASCADE CONSTRAINTS;
CREATE TABLE TIME_DIM
(
    TIME_ID       NUMBER PRIMARY KEY,
    SELL_DATE     DATE,
    WEEK_DAY      NUMBER(1),
    IS_WEEKEND    NUMBER(1),
    WEEK_DAY_NAME VARCHAR2(32),
    MONTH_NAME    VARCHAR2(32),
    MONTH         NUMBER(2),
    YEAR          NUMBER(4)
);

DROP TABLE PRODUCTS_DIM CASCADE CONSTRAINTS;
CREATE TABLE PRODUCTS_DIM
(
    PRODUCT_ID    NUMBER PRIMARY KEY,
    NAME          VARCHAR2(128),
    CATEGORY_NAME VARCHAR2(64)
)

DROP TABLE LOCALIZATIONS_DIM CASCADE CONSTRAINTS;
CREATE TABLE LOCALIZATIONS_DIM
(
    LOCALIZATION_ID NUMBER PRIMARY KEY,
    COUNTRY         VARCHAR2(64),
    STATE           VARCHAR2(64),
    CITY            VARCHAR2(64)
)

-- TABELA FAKTÓW REPREZENTUJE DZIENNĄ SPRZEDAŻ PRODUKTU W DANEJ LOKALIZACJI
DROP TABLE SALES_FACT CASCADE CONSTRAINTS;
CREATE TABLE SALES_FACT
(
    TIME_ID         NUMBER REFERENCES TIME_DIM (TIME_ID),
    PRODUCT_ID      NUMBER REFERENCES PRODUCTS_DIM (PRODUCT_ID),
    LOCALIZATION_ID NUMBER REFERENCES LOCALIZATIONS_DIM (LOCALIZATION_ID),
    VALUE_M         NUMBER(14, 6),
    PROFIT_M        NUMBER(14, 6),
    PRIMARY KEY (TIME_ID, PRODUCT_ID, LOCALIZATION_ID)
)

DROP SEQUENCE S_TIME_DIM;
CREATE SEQUENCE S_TIME_DIM;
CREATE OR REPLACE TRIGGER T_SET_TIME_DIM_ID
    BEFORE INSERT
    ON TIME_DIM
    FOR EACH ROW
BEGIN
    :NEW.TIME_ID := S_TIME_DIM.NEXTVAL;
END;
/

DROP SEQUENCE S_LOCALIZATIONS_DIM;
CREATE SEQUENCE S_LOCALIZATIONS_DIM;
CREATE OR REPLACE TRIGGER T_SET_LOCALIZATION_DIM_ID
    BEFORE INSERT
    ON LOCALIZATIONS_DIM
    FOR EACH ROW
BEGIN
    :NEW.LOCALIZATION_ID := S_LOCALIZATIONS_DIM.NEXTVAL;
END;
/

DROP SEQUENCE S_PRODUCTS_DIM;
CREATE SEQUENCE S_PRODUCTS_DIM;
CREATE OR REPLACE TRIGGER T_SET_PRODUCTS_DIM_ID
    BEFORE INSERT
    ON PRODUCTS_DIM
    FOR EACH ROW
BEGIN
    :NEW.PRODUCT_ID := S_PRODUCTS_DIM.NEXTVAL;
END;
/

CREATE OR REPLACE PACKAGE STAR_SCHEME_PACKAGE AS
    FUNCTION F_IS_WEEKEND(P_DATE DATE) RETURN NUMBER;
    PROCEDURE P_INIT_TIME_DIM;
    PROCEDURE P_INIT_LOCALIZATIONS_DIM;
    PROCEDURE P_INIT_PRODUCTS_DIM;
END STAR_SCHEME_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY STAR_SCHEME_PACKAGE AS
    -- FUNKCJA SPRAWDZAJĄCA CZY DANA DATA WYPADA W WEEKEND
    -- BAZUJE ONA NA KALENDARZU JULIAŃSKIM, KTÓRY ZWRACA ILOŚĆ DNI OD ZNANEGO, USTALONEGO MIEJSCA W CZASIE
    -- BIERZE RESZTE Z DZIELENIA PRZEZ 7 I DODAJE 1 PO CZYM SPRWADZA CZY WARTOŚĆ JEST RÓWNA 6 LUB 7
    FUNCTION F_IS_WEEKEND(P_DATE DATE) RETURN NUMBER IS
        IS_WEEKEND NUMBER;
    BEGIN
        SELECT CASE WHEN MOD(TO_CHAR(P_DATE, 'J'), 7) + 1 IN (6, 7) THEN 1 ELSE 0 END
        INTO IS_WEEKEND
        FROM DUAL;
        RETURN IS_WEEKEND;
    END F_IS_WEEKEND;

    -- PROCEDURA WSTAWIAJĄCA DANE DO WYMIARU CZASU
    PROCEDURE P_INIT_TIME_DIM IS
    BEGIN
        MERGE INTO TIME_DIM T
        USING (SELECT DISTINCT O.ORDER_DATE,
                               TO_NUMBER(TO_CHAR(O.ORDER_DATE, 'D'))  AS WEEK_DAY,
                               F_IS_WEEKEND(O.ORDER_DATE) AS IS_WEEKEND,
                               TO_CHAR(O.ORDER_DATE, 'DAY')           AS WEEK_DAY_NAME,
                               TO_CHAR(O.ORDER_DATE, 'MONTH')         AS MONTH_NAME,
                               EXTRACT(MONTH FROM O.ORDER_DATE)       AS MONTH,
                               EXTRACT(YEAR FROM O.ORDER_DATE)        AS YEAR
               FROM ORDERS O) SUB
        ON (T.SELL_DATE = SUB.ORDER_DATE)
        WHEN NOT MATCHED THEN
            INSERT (T.SELL_DATE, T.WEEK_DAY, T.IS_WEEKEND, T.WEEK_DAY_NAME, T.MONTH_NAME, T.MONTH, T.YEAR)
            VALUES (SUB.ORDER_DATE, SUB.WEEK_DAY, SUB.IS_WEEKEND, SUB.WEEK_DAY_NAME, SUB.MONTH_NAME, SUB.MONTH,
                    SUB.YEAR);
    END P_INIT_TIME_DIM;

    -- PROCEDURA WSTAWIAJĄCA DANE DO WYMIARU LOKALIZACJI
    PROCEDURE P_INIT_LOCALIZATIONS_DIM IS
    BEGIN
        MERGE INTO LOCALIZATIONS_DIM LD
        USING (SELECT DISTINCT *
               FROM LOCALIZATIONS) SUB
        ON (LD.COUNTRY = SUB.COUNTRY AND LD.STATE = SUB.STATE AND LD.CITY = SUB.CITY)
        WHEN NOT MATCHED THEN
            INSERT (LD.COUNTRY, LD.STATE, LD.CITY) VALUES (SUB.COUNTRY, SUB.STATE, SUB.CITY);
    END P_INIT_LOCALIZATIONS_DIM;

    -- PROCEDURA WSTAWIAJĄCA DANE DO WYMIARU PRODUKTÓW
    PROCEDURE P_INIT_PRODUCTS_DIM IS
    BEGIN
        MERGE INTO PRODUCTS_DIM PD
        USING (SELECT DISTINCT *
               FROM PRODUCTS P
                        JOIN CATEGORIES C ON (P.CATEGORY_ID = C.CATEGORY_ID)) SUB
        ON (PD.NAME = SUB.PRODUCT_NAME
            AND PD.CATEGORY_NAME = SUB.CATEGORY_NAME)
        WHEN NOT MATCHED THEN
            INSERT (PD.NAME, PD.CATEGORY_NAME) VALUES (SUB.PRODUCT_NAME, SUB.CATEGORY_NAME);
    END P_INIT_PRODUCTS_DIM;
END STAR_SCHEME_PACKAGE;
/

BEGIN
    STAR_SCHEME_PACKAGE.P_INIT_TIME_DIM;
    STAR_SCHEME_PACKAGE.P_INIT_LOCALIZATIONS_DIM;
    STAR_SCHEME_PACKAGE.P_INIT_PRODUCTS_DIM;
END;
/

COMMIT;
